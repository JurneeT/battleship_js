//apps state variables

const Guess = 
{
  prevHits: [],
  cpuGuesses: [],
  prevDirection: {
    direction: 0,
    hit: false,
  },
  cpuGuessDirection: 0,
};

// variables used thusfar ///////////////////////
let gameCount = 0;
let start = 0;
let dir = 0;
let shipLength = 0;
let gameBoard = [];
let computerBoard = [];
let gameOver = false;
for (let i = 0; i < 100; i++) 
{
  gameBoard[i] = null;
  computerBoard[i] = null;
}

const Player = 
{
  ships: 
  {
    battleship: 
    {
      pegs: [null, null, null, null, null],
      isSunk: false,
    },
    cruiser: 
    {
      pegs: [null, null, null, null],
      isSunk: false,
    },
    sub: 
    {
      pegs: [null, null, null],
      isSunk: false,
    },
    destroyer: 
    {
      pegs: [null, null],
      isSunk: false,
    },
  },
  // User attack function
  generate_attack()
  {
    userInput = prompt("Guess cell");
    return userInput;
  }
};
/////////////////////////////////////////////////

let hitWasGuessed = 0;
let isBound = Boolean;
let playerWinCount = 0;
let cpuWinCount = 0;
let playerNodes = [];
let firstNode = 0;
let cpuNodes = [];
let guess = 0;


//console.log(gameBoard)



const cpu = 
{
  ships: 
  {
    battleship: [null, null, null, null, null],
    cruiser: [null, null, null, null],
    sub: [null, null, null],
    destroyer: [null, null],
  },
};


/* ship placement
  player selects ship
  - ship id will be the ship size
  player selects cell to place
  - update board array so that the value is changed from null to the ship id number at the index they selected
  player selects adjacent cell for direction
  - update the board by filling in the null rest of the null values for the length of the ship
  - she ship array is updated with the indexes of the board
  CPU does this but with a random number generator
*/
function selectShip(button_id) 
{
  if (button_id === "battleship") 
  {
    shipLength = 5;
    start = prompt("Select a start space place your Battleship");
    PlaceShip();
  } else if (button_id === "cruiser") 
  {
    shipLength = 4;
    start = prompt("Select a start space place your Cruiser");
    PlaceShip();
  } else if (button_id === "sub") 
  {
    shipLength = 3;
    start = prompt("Select a start space place your Sub");
    PlaceShip();
  } else if (button_id === "destroyer") 
  {
    shipLength = 2;
    start = prompt("Select a start space place your Destroyer");
    PlaceShip();
  }
}
  
function PlaceShip()
{
  if (shipLength == 5)
  {
    if(Player.ships.battleship.pegs.every(element => element === null))
    {
      Player.ships.battleship.pegs[0] = parseInt(start);
      gameBoard[start - 1] = shipLength;

      SetDirection();

      if (dir == start - 1) 
      {
        Player.ships.battleship.pegs[1] = parseInt(dir);
        Player.ships.battleship.pegs[2] = dir - 1;
        Player.ships.battleship.pegs[3] = dir - 2;
        Player.ships.battleship.pegs[4] = dir - 3;
      }
      else if (parseInt(dir) == parseInt(start) + 1) 
      {
        Player.ships.battleship.pegs[1] = parseInt(dir);
        Player.ships.battleship.pegs[2] = parseInt(start) + 2;
        Player.ships.battleship.pegs[3] = parseInt(start) + 3;
        Player.ships.battleship.pegs[4] = parseInt(start) + 4;
      }
      else if (parseInt(dir) == parseInt(start) - 10) 
      {
        Player.ships.battleship.pegs[1] = parseInt(dir);
        Player.ships.battleship.pegs[2] = parseInt(dir) - 10;
        Player.ships.battleship.pegs[3] = parseInt(dir) - 20;
        Player.ships.battleship.pegs[4] = parseInt(dir) - 30;
      }
      else if (parseInt(dir) == parseInt(start) + 10) 
      {
        Player.ships.battleship.pegs[1] = parseInt(dir);
        Player.ships.battleship.pegs[2] = parseInt(dir) + 10;
        Player.ships.battleship.pegs[3] = parseInt(dir) + 20;
        Player.ships.battleship.pegs[4] = parseInt(dir) + 30;
      }
    }
  }
  else if (shipLength == 4)
  {
    if(Player.ships.cruiser.pegs.every(element => element === null))
    {
      Player.ships.cruiser.pegs[0] = parseInt(start);
      gameBoard[start - 1] = shipLength;

      SetDirection();

      if (dir == start - 1) 
      {
        Player.ships.cruiser.pegs[1] = parseInt(dir);
        Player.ships.cruiser.pegs[2] = dir - 1;
        Player.ships.cruiser.pegs[3] = dir - 2;
      }
      else if (parseInt(dir) == parseInt(start) + 1) 
      {
          Player.ships.cruiser.pegs[1] = parseInt(dir);
          Player.ships.cruiser.pegs[2] = parseInt(start) + 2;
          Player.ships.cruiser.pegs[3] = parseInt(start) + 3;
      }
      else if (parseInt(dir) == parseInt(start) - 10) 
      {
        Player.ships.cruiser.pegs[1] = parseInt(dir);
        Player.ships.cruiser.pegs[2] = parseInt(dir) - 10;
        Player.ships.cruiser.pegs[3] = parseInt(dir) - 20;
        }else if (parseInt(dir) == parseInt(start) + 10) {
        Player.ships.cruiser.pegs[1] = parseInt(dir);
        Player.ships.cruiser.pegs[2] = parseInt(dir) + 10;
        Player.ships.cruiser.pegs[3] = parseInt(dir) + 20;
      }
    }
  }
  else if (shipLength == 3)
  {
    if(Player.ships.sub.pegs.every(element => element === null))
    {
      Player.ships.sub.pegs[0] = parseInt(start);
      gameBoard[start - 1] = shipLength;

      SetDirection();

      if (dir == start - 1) 
      {
          Player.ships.sub.pegs[1] = parseInt(dir);
          Player.ships.sub.pegs[2] = dir - 1;
      }
      else if (parseInt(dir) == parseInt(start) + 1) 
      {
          Player.ships.sub.pegs[1] = parseInt(dir);
          Player.ships.sub.pegs[2] = parseInt(start) + 2;
      }  
      else if (parseInt(dir) == parseInt(start) - 10) 
      {
        Player.ships.sub.pegs[1] = parseInt(dir);
        Player.ships.sub.pegs[2] = parseInt(dir) - 10;
      }
      else if (parseInt(dir) == parseInt(start) + 10) 
      {
        Player.ships.sub.pegs[1] = parseInt(dir);
        Player.ships.sub.pegs[2] = parseInt(dir) + 10;
      }
    }
  }
  else if (shipLength == 2)
  {
    if(Player.ships.destroyer.pegs.every(element => element === null))
    {
      Player.ships.destroyer.pegs[0] = parseInt(start);
      gameBoard[start - 1] = shipLength;

      SetDirection();

      if (dir == start - 1) 
      {
        Player.ships.destroyer.pegs[1] = parseInt(dir);
      }
      else if (parseInt(dir) == parseInt(start) + 1) 
      {
        Player.ships.destroyer.pegs[1] = parseInt(dir);
      }
      else if (parseInt(dir) == parseInt(start) - 10) 
      {
        Player.ships.destroyer.pegs[1] = parseInt(dir);
      }
      else if (parseInt(dir) == parseInt(start) + 10) 
      {
        Player.ships.destroyer.pegs[1] = parseInt(dir);
      }
    }
  }
}


function SetDirection()
{
  dir = prompt("Select an adjacent space left, right, up, or down to place your Battleship in selected direction");

    
  if (dir == start - 1)
  {
    for (let i = shipLength; i > 0; i--)
    {
      gameBoard[dir-i+1] = shipLength;
        //put if statements for ships
    }
  }

  //selected cell to the right
  if (start == dir - 1)
  {
    for (let i = 0; i < shipLength-1; i++)
    {
      gameBoard[i+(dir-1)] = shipLength;
    }
  }
    //selected cell to the bottom
  if (parseInt(dir) == parseInt(start) + 10)
  {
    let x = parseInt(dir);
    for (let i = 0; i < shipLength-1; i++)
    {
      gameBoard[x-1] = shipLength;
      x += 10;
      console.log()
    }
  }
  //selected cell to the top
  if (dir == start - 10)
  {
    let x = dir;
    for (let i = 0; i < shipLength-1; i++)
    {
      gameBoard[x-1] = shipLength;
      console.log(x);
      x -= 10;
    }
  } 
}

// Player turn is even, CPU turn is Odd1
function playGame(CPU,turn) 
{
  while (gameOver == false)
  {
    if ( turn % 2 == 0)
    {
      console.log("Players turn");
      checkHit(Player.generate_attack());
      turn += 1;
    }
    else
    {
      console.log("CPU's turn");
      checkHit(CPU.generate_random_attack());
      turn += 1;
    }
    if (Guess.prevHits.length == 14)
    {
    gameOver = true;
    console.log("GameOver");
    }
  }

}
////////////////////////////////////////////////////////


// winCheck --> check for win to be called within checkHit
function winCheck() {
  if (playerWinCount === 14) {
    userPrompt.innerHTML = "YOU WIN!";
    return true;
  } else if (cpuWinCount === 14) {
    userPrompt.innerHTML = "CPU WINS!";
    return true;
  } else return false;
}
///////////////////////////////////////////////////////
//function to checj hit
function checkHit(guess_cell_id) 
{
  if (gameBoard[guess_cell_id - 1] == null){
    console.log("Miss");
  }
  else if (gameBoard[guess_cell_id - 1] !== null){
    console.log("Hit");
    Guess.prevHits.push(guess_cell_id);
  }

  console.log('There are currently:', Guess.prevHits.length, 'hits' );
}

function populate_player_grid()
{
  //Player Selects battleship button
  selectShip("battleship");
  console.log(Player.ships.battleship.pegs);
  console.log(gameBoard);

  //Player Selects cruiser button
  selectShip("cruiser");
  console.log(Player.ships.cruiser.pegs)
  console.log(gameBoard);

  //Player Selects sub button
  selectShip("sub");
  console.log(Player.ships.sub.pegs)
  console.log(gameBoard); 

  //Player Selects destroyer button
  selectShip("destroyer");

  console.log(Player.ships.destroyer.pegs);
  console.log(gameBoard);

}

function GameStart()
{
  populate_player_grid();

  var turn = Math.floor(Math.random() * (2 - 0) + 0);
  if ( turn % 2 == 0)
    {
      console.log("Player goes first");
     
    }
    else
    {
      console.log("CPU goes first");
    }
  return turn;

}



// defining the CPU class
class CPU 
{
  constructor(name)
  {
    this.name = name;
  }

  generate_random_attack()
  {
    return Math.floor(Math.random() * (100 - 0) + 0);
  }
  


}



const cpu1 = new CPU('Mark');

playGame(cpu1,GameStart());
